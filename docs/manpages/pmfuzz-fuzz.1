.\" Automatically generated by Pandoc 2.10
.\"
.TH "pmfuzz-fuzz" "1" "March 2021" "" "PMFuzz Programmer\[cq]s Manual"
.hy
.SH NAME
.PP
\f[B]pmfuzz-fuzz\f[R] - Generating high-value testcases for triggering
crash-consistency PM programs.
.SH SYNOPSIS
.PP
\f[B]pmfuzz-fuzz\f[R] [-h] [\[en]force-resp FORCE_RESP]
[\[en]cores-stage1 CORES_STAGE1] [\[en]cores-stage2 CORES_STAGE2]
[\[en]overwrite] [\[en]disable-stage2] [\[en]dry-run]
[\[en]progress-interval PROGRESS_INTERVAL] [\[en]progress-file
PROGRESS_FILE] [\[en]checks-only] [\[en]verbose] [\[en]version] indir
outdir config
.SH DESCRIPTION
.PP
PMFuzz: A Persistent Memory Fuzzer, version 1.0 by ShiftLab
.SH OPTIONS
.TP
\f[B]indir\f[R]
path to directory containing initial test corpus for stage 1.
See INPUT-DIRECTORY.
.TP
\f[B]outdir\f[R]
path to directory for generated test cases for stage 1, works as input
for stage 2.
See OUTPUT-DIRECTORY.
.TP
\f[B]config\f[R]
Points to the config file to use, should conform to:
configs/default.yaml.
See CONFIGURATION-FILE.
.TP
\f[B]\[en]force-resp\f[R] \f[I]FORCE_RESP\f[R]
Forces response to questions
.TP
\f[B]\[en]cores-stage1\f[R] \f[I]CORES_STAGE1\f[R], \f[B]-c1\f[R] \f[I]CORES_STAGE1\f[R]
Maximum cores stage 1 fuzzer can use, default: 1.
Can be specified in config.
.TP
\f[B]\[en]cores-stage2\f[R] \f[I]CORES_STAGE2\f[R], \f[B]-c2\f[R] \f[I]CORES_STAGE2\f[R]
Maximum cores stage 2 fuzzer can use, default: 1.
Can be specified in config.
.TP
\f[B]\[en]overwrite\f[R], \f[B]-o\f[R]
Overwrite the output directory
.TP
\f[B]\[en]disable-stage2\f[R], \f[B]-1\f[R]
Disables stage 2.
Can be specified in config.
.TP
\f[B]\[en]dry-run\f[R]
Enables dry run, no actual commands are executed (Deprecated)
.TP
\f[B]\[en]progress-interval\f[R] \f[I]PROGRESS_INTERVAL\f[R]
Interval in seconds for recording progress, default: 60 seconds.
Can be specified in config.
.TP
\f[B]\[en]progress-file\f[R] \f[I]PROGRESS_FILE\f[R]
Output file for writing progress to a file.
Can be specified in config.
.TP
\f[B]\[en]checks-only\f[R]
Performs startup checks and exits
.TP
\f[B]\[en]verbose\f[R], \f[B]-v\f[R]
Enables verbose logging to stdout
.TP
\f[B]\[en]version\f[R]
show program\[cq]s version number and exit
.SH EXAMPLES
.PP
To run PMFuzz without any additional output:
.IP
.nf
\f[C]
pmfuzz-fuzz \[rs]
    ./input_directory ./output_directory ./configs/default.yml
\f[R]
.fi
.PP
To record fuzzing progress, use:
.IP
.nf
\f[C]
pmfuzz-fuzz \[rs]
    --progress-file=/tmp/fuzz_progress
    ./input_directory ./output_directory ./configs/default.yml
\f[R]
.fi
.PP
To get verbose output of the PMFuzz\[aa]s current step, use:
.IP
.nf
\f[C]
pmfuzz-fuzz \[rs]
    --verbose \[rs]
    ./input_directory ./output_directory ./configs/default.yml
\f[R]
.fi
.SH INPUT DIRECTORY
.PP
PMFuzz needs a non-empty directory with seed inputs for fuzzing.
These inputs should be command inputs that PMFuzz can execute using the
target program.
PMFuzz directly uses these inputs using AFL, see afl-fuzz(1).
.SH OUTPUT DIRECTORY
.PP
On each run, pmfuzz will write to the following files
.IP "1." 3
\f[B]<output_dirname>/\f[R]: Contains all the testcases, pool images,
crash sites and other information needed to run PMFuzz.
.IP "2." 3
\f[B]<output_dirname>.progress\f[R]: Tracks the progress of the fuzzing.
.PD 0
.P
.PD
.IP "3." 3
\f[B]<output_dirname>.progress.events\f[R]: Tracks events like stage
transitions in PMFuzz.
.SS Output Directory Structure
.PP
The output directory has the following structure
.IP
.nf
\f[C]
output directory name
    +-- \[at]info
    +-- \[at]dedup
    |    +-- id=001.pm_pool
    |    +-- id=001.testcase
    |    +-- id=001.min.testcase
    |    +-- ...
    +-- stage=1,iter=0
    |    +-- afl-results
    |    |    +-- master_fuzzer
    |    |        +-- queue
    |    |    +-- slave_fuzzer01
    |    |    +-- ...
    |    +-- testcases
    |    |    +-- id=001.testcase
    |    |    +-- ...
    |    +-- pm_images
    |    |    +-- id=001.pm_pool
    |    |    +-- ...
    |    +-- \[at]dedup_sync
    |         +-- id=001.pm_pool
    |         +-- id=001.testcase
    |         +-- id=001.timer
    |         +-- ...
    +-- stage=2,iter=1
         +-- afl-results
         |    +-- id=0001/master_fuzzer/queue
         |    +-- id=0002/master_fuzzer/queue
         |    +-- ...
         +-- testcases
         |    +-- id=0001,id=001.testcase
         |    +-- ...
         |    +-- id=0002,id=002.testcase
         |    +-- ...
         +-- pm_images
         |    +-- id=0001,id=001.pm_pool
         |    +-- ...
         |    +-- id=0002,id=001.pm_pool
         |    +-- ...
         +-- \[at]dedup_sync
              +-- id=001.pm_pool
              +-- id=001.testcase
              +-- id=001.timer
              +-- ...
\f[R]
.fi
.SS Progress Report
.PP
The output directory is co-located with progress file with the same name
as the output directory but has an file-extension of type
`\f[C].progress\f[R]'.
The columns represent the following values, in-order they appear:
.IP
.nf
\f[C]
Current time, Total testcases, Total PM testcases, Total paths, Total
PM paths, Executions/s, internal-execution-parameter
\f[R]
.fi
.SS Naming Convention
.PP
Each testcase/pm_image/crash_site name is a sequence of one or more
id-tags.
Each id-tag is of the format \f[C]id=<value>\f[R] and a sequence of
id-tags are connected using the characters \f[C].\f[R] or \f[C],\f[R].
If an id-tag is after \[aa].\[aa] this means that the id-tag corresponds
to a failure image, while if an id-tag starts with `\f[C],\f[R]', then
that id-tag is for a PMFuzz generated testcase.
.PP
If a testcase has multiple IDs, they move down the hierarchy from left
to right.
An example fuzzing round and corresponding file name are:
.PP
PMFuzz marks all the testcases in the input directory with a unique
sequential id starting from 1:
.IP "1." 3
Initial testcases: \f[C]id=000001.testcase\f[R],
\f[C]id=000002.testcase\f[R] \&...
.IP "2." 3
Next round of fuzzing uses the second testcase
\f[C]id=000002.testcase\f[R] to generate 5 new testcases, these
testcases will now be named:
.RS 4
.PP
\f[C]id=000002,id=000001.testcase\f[R]
.PD 0
.P
.PD
\f[C]id=000002,id=000002.testcase\f[R]
.PD 0
.P
.PD
\f[C]id=000002,id=000003.testcase\f[R]
.PD 0
.P
.PD
\f[C]id=000002,id=000004.testcase\f[R]
.PD 0
.P
.PD
\f[C]id=000002,id=000005.testcase\f[R]
.RE
.IP "3." 3
Next, PMFuzzes uses the testcase \f[C]id=00002,id=00003.testcase\f[R] to
randomly generate the following crash sites:
.RS 4
.PP
\f[C]id=000002,id=000002.id=000011.testcase\f[R]
.PD 0
.P
.PD
\f[C]id=000002,id=000002.id=000035.testcase\f[R]
.PD 0
.P
.PD
(note the use of both kinds separator)
.PP
Example testcase/pm_pool/crash_site names:
.IP \[bu] 2
\f[C]id=000000,id=000199,id=00088.testcase\f[R]
.IP \[bu] 2
\f[C]id=002310.id=000033mid=000002,id=000002.id=000035_pool\f[R]
.IP \[bu] 2
\f[C]map_id=000002,id=010199.id=000004.id=000002.testcase\f[R]
.RE
.SH CONFIGURATION FILE
.PP
PMFuzz uses a YAML based file to configure different parameters.
.PP
\f[B]configs/examples\f[R] directory contains several examples for
writing and organizing configurations that PMFuzz can use.
If you want to write your own configuration file, include
\f[B]config/default.yml\f[R] in your new config file and change the
values you need.
.PP
If you are writing your own configuration, please note the following:
.SS Including Other Configs
.PP
PMFuzz supports including one or more configuration files to allow
easier customization.
.PP
Syntax for including config files is:
.IP
.nf
\f[C]
include:
  - base-config-1.yaml
  - base-config-2.yaml
  .
  .
  - base-config-n.yaml
\f[R]
.fi
.PP
In case of duplicate keys, values are prioritized (and overwritten) in
the order they appear.
However, the file including them have highest priority.
.PP
\f[B]Note\f[R]
.PD 0
.P
.PD
Nested includes are not supported.
.SS Variable Substitution
.PP
The following variables are automatically substituted in the config file
values:
.PP
\f[B]%ROOT%\f[R]
.PD 0
.P
.PD
Points to the PMFuzz root directory (root of this repository)
.PP
\f[B]%BUILD%\f[R]
.PD 0
.P
.PD
Points to the \f[C]%ROOT%/build/\f[R]
.PP
\f[B]%LIB%\f[R] Points to the \f[C]%ROOT%/build/lib\f[R]
.PP
\f[B]%BIN%\f[R] Points to the \f[C]%ROOT%/build/bin\f[R]
.SS Example
.PP
Here is a simple example that runs PMDK\[aa]s RBTree workload in
baseline mode.
This configuration overwrites the number of CPU cores used by the first
stage to 4.
Note, lines starting with \f[C]#\f[R] are comments.
.IP
.nf
\f[C]
# Brief:
#   Runs the Baseline for rbtree

include:
  - configs/base.yml
  - configs/workload/mapcli.rbtree.yml
  - configs/run_configs/baseline.yml

pmfuzz:
  stage:
    \[dq]1\[dq]:
      cores: 4
\f[R]
.fi
.SH ENVIRONMENT
.PP
This section defines several environment variables that may change
PMFuzz\[aa]s behavior.
.PP
Values set and unset describe the behavior when the environment variable
is not set to any value and when the variable is set to any non-empty
string (including 0) respectively.
.SS USE_FAKE_MMAP
.PP
\f[B]1\f[R]
.PD 0
.P
.PD
Enables fake mmap by copying the contents (using memcpy) of the pool
image to the volatile memory.
Mounting the pool to the volatile memory improves fuzzing performance.
.PP
\f[B]0\f[R]
.PD 0
.P
.PD
Mounts the pool using PMDK\[aa]s default mounting functions.
Before invoking the target, PMFuzz would create a copy of the pool image
and call the target on that image.
Depending on the output of the fuzzing,PMFuzz would either save that
image for future use, or discard it.
.SS PMEM_MMAP_HINT
.PP
\f[B]addr\f[R]
.PD 0
.P
.PD
Address of the mount point of the pool.
See libpmem(7).
.PP
\f[B]unset\f[R]
.PD 0
.P
.PD
PMDK decides the mount address of the pool.
.SS ENABLE_CNST_IMG
.PP
\f[B]1\f[R]
.PD 0
.P
.PD
Disables default PMDK\[aa]s behaviour that generates non-identical
images for same input.
\f[B]0\f[R]
.PD 0
.P
.PD
PMFuzz generated images would have random variations that may negatively
affect the fuzzing performance and reproducibility.
.SS FI_MODE
.PP
\f[B]\[lq]IMG_GEN\[rq]\f[R]
.PD 0
.P
.PD
In case the the PMFUZZ_MODE env variable is set to \[lq]IMG_GEN\[rq], a
failure point is injected and the PM Image is dumped if the PM pool has
changed since the last failure injection.
First failure injection always results in an image dump.
.PP
Images dump naming pattern: \f[C]<pool file name>.<failure id>\f[R] If a
failure list file is additionally specified using the env variable, the
falure ids that generate dumps are written to that file, one per line.
.PP
\f[B]\[lq]IMG_REP\[rq]\f[R]
.PD 0
.P
.PD
Todo
.PP
For more information on FI_MODE see libpmfuzz.c.
.SS FAILURE_LIST
.PP
Path to a file that libpmfuzz would write the failure IDs to.
.PP
See libpmfuzz.c
.SS PMFUZZ_DEBUG
.PP
\f[B]1\f[R]
.PD 0
.P
.PD
Enables debug output from libpmfuzz.
.PP
\f[B]0\f[R]
.PD 0
.P
.PD
\f[B]unset\f[R]
.PD 0
.P
.PD
Disables debug output from libpmfuzz.
.SS ENABLE_PM_PATH
.PP
Enables deep paths in PMFuzz
.SS GEN_ALL_CS
.PP
Forces PMFuzz to generate all crash sites.
Use with caution.
.SS IMG_CREAT_FINJ
.PP
Deprecated.
.SS PMFUZZ_SKIP_TC_CHECK
.PP
\f[B]set\f[R]
.PD 0
.P
.PD
Disable testcase size check in AFL++.
.PP
\f[B]unset\f[R]
.PD 0
.P
.PD
Enables AFL++\[aa]s default behaviour to check testcase size.
.PP
See afl-fuzz(1).
.SS PRIMITIVE_BASELINE_MODE
.PP
\f[B]set\f[R]
.PD 0
.P
.PD
Makes workload delete image on start if the pool exists.
.SH COMMON ERRORS
.SS FileNotFoundError for instance\[aa]s pid file
.PP
Raised when AFL cannot bind to a free core or no core is free.
.SS Random tar command failed
.PP
Check if device has any free space left.
.SS shmget (2): No space left on device
.PP
Run the following command in your shell to remove all shared memory
segments:
.IP
.nf
\f[C]
$ ipcrm -a
\f[R]
.fi
.PP
\f[B]Warning\f[R]: This removes all user owned shared memory segments,
don\[aa]t run with superuser privilege or on a machine with other
critical applications running.
.SH PROGRAMMING PMFUZZ
.PP
To modify pmfuzz please look into \f[B]docs/programming_manual\f[R] or
\f[B]docs/programming_manual.pdf\f[R].
.SH BUGS
.PP
Please report bugs at:
\[la]https://github.com/Systems-ShiftLab/pmfuzz/issues\[ra]
.SH SEE ALSO
.PP
libpmfuzz(7), afl-fuzz(1), afl-cmin(1), afl-tmin(1), afl-gotcpu(1)
.SH AUTHORS
.PP
PMFuzz was written by ShiftLab, University of Virginia.
\[la]https://www.cs.virginia.edu/\[ti]smk9u/shiftLab.html\[ra]
.SH DOCUMENTAION
.PP
Complete documentation for PMFuzz can be accessed online at
\[la]https://github.com/Systems-ShiftLab/pmfuzz/wiki\[ra]
